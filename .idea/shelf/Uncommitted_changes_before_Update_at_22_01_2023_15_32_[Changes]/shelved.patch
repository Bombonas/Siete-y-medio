Index: resources/funciones.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import datetime\r\nimport os\r\nfrom resources.prints import *\r\nfrom resources.bbdd_provisionales import *\r\nimport random\r\nimport math\r\nimport itertools\r\n\r\nimport mysql.connector\r\n\r\ndb = mysql.connector.connect(user=\"MAP\", password=\"2023Proyecto\",\r\n                                   host=\"proyecto1.mysql.database.azure.com\",\r\n                                   database=\"seven_and_half\",\r\n                                   port=\"3306\")\r\ncursor = db.cursor()\r\n\r\ndef clear():\r\n    if os.name == 'nt':\r\n        os.system('cls')\r\n    else:\r\n        os.system('clear')\r\n\r\ndef order_list(llista, ordre=\"des\"):\r\n    # PRE: llista con valores no definidos. orde, por defecto \"des\", ordena de forma desdecendente cuando ordre = des,\r\n    #      y ordena crecientemente cuando ordre = asc\r\n    # POST: Devuelve el parametro llista ordenada segun el parametro ordre\r\n    try:\r\n        if type(llista) != list:\r\n            raise ValueError(\"The parameter llista must to be a list\")\r\n        if ordre not in [\"des\", \"asc\"]:\r\n            raise TypeError(\"The parameter ordre must to be des or asc\")\r\n        for i in range(1, len(llista) - 1):\r\n            if type(llista[i]) != type(llista[i - 1]):\r\n                raise TypeError(\"The list must to have the same variable type\")\r\n\r\n        # BUBBLE SORT\r\n        for pasada in range(len(llista) - 1):\r\n            lista_ordenada = True\r\n            for i in range(len(llista) - 1 - pasada):\r\n\r\n                if ordre == \"des\":\r\n                    if llista[i] < llista[i + 1]:\r\n                        lista_ordenada = False\r\n                        aux = llista[i]\r\n                        llista[i] = llista[i + 1]\r\n                        llista[i + 1] = aux\r\n\r\n                elif ordre == \"asc\":\r\n                    if llista[i] > llista[i + 1]:\r\n                        lista_ordenada = False\r\n                        aux = llista[i]\r\n                        llista[i] = llista[i + 1]\r\n                        llista[i + 1] = aux\r\n\r\n            if lista_ordenada:\r\n                break\r\n\r\n    except ValueError as e:\r\n        print(e)\r\n    except TypeError as e:\r\n        print(e)\r\n    return llista\r\n\r\n\r\ndef setGamePriority(mazo=[], jugadores=[]):\r\n    # PRE: Introducimos la list(cartas) y la game=[]\r\n    # Repartimos una carta a cada uno\r\n    # Creamos otra lista en el mismo orden con los valores de las cartas para ordenarlas\r\n    # Devolvemos una lista de tuplas con (DNI, CARTA)\r\n    mazo1 = mazo.copy()\r\n    cartasRepartidas = {}\r\n    cartasOrdenadas = []\r\n    for i in range(len(jugadores)):\r\n        cartaRandom = random.choice(mazo1)\r\n        cartasRepartidas[jugadores[i]] = cartaRandom\r\n        mazo1.remove(cartaRandom)\r\n    mida_llista = len(jugadores)\r\n    llista = []\r\n    for i in cartasRepartidas:\r\n        carta = cartasRepartidas[i]\r\n        llista.append(cartas[carta]['value'])\r\n    for i in range(mida_llista - 1):\r\n        for j in range(0, mida_llista - i - 1):\r\n            if llista[j] < llista[j + 1]:\r\n                llista[j], llista[j + 1] = llista[j + 1], llista[j]\r\n                jugadores[j], jugadores[j + 1] = jugadores[j + 1], jugadores[j]\r\n            elif llista[j] == llista[j + 1] and cartas[cartasRepartidas[jugadores[j]]]['priority'] < \\\r\n                    cartas[cartasRepartidas[jugadores[j + 1]]]['priority']:\r\n                jugadores[j], jugadores[j + 1] = jugadores[j + 1], jugadores[j]\r\n\r\n    for i in jugadores:\r\n        cartasOrdenadas.append((i, cartasRepartidas[i]))\r\n\r\n    return cartasOrdenadas\r\n\r\ndef resetPoints():\r\n    for i in game:\r\n        players[i]['points'] = 20\r\n\r\n\r\ndef generate_game_id():\r\n    query = \"SELECT count(cardgame_id) FROM cardgame;\"\r\n    cursor.execute(query)\r\n    result = cursor.fetchall()\r\n    new_cardgame_id = result[0][0]\r\n    return new_cardgame_id\r\n\r\n\r\ndef card_id_list(diccionario):\r\n    lista_card_id = []\r\n    for i in diccionario:\r\n        lista_card_id.append(diccionario[i])\r\n\r\n    return lista_card_id\r\n\r\n\r\ndef fill_player_game(gameID, jugadores=[], card_id_list=[], starting_points_list=[], ending_points_list=[]):\r\n    player_game.update({gameID: ''})\r\n    for i in range(len(jugadores)):\r\n        if i == 0:\r\n            player_game[gameID] = {jugadores[i]: {'initial_card_id': card_id_list[i], 'starting_points':\r\n                starting_points_list[i], 'ending_points': ending_points_list[i]}}\r\n        else:\r\n            player_game[gameID][jugadores[i]] = {'initial_card_id': card_id_list[i], 'starting_points':\r\n                starting_points_list[i], 'ending_points': ending_points_list[i]}\r\n    return player_game\r\n\r\ndef fill_cardgame(gameID, num_players, start_hour = \"\", rounds = 0, end_hour = \"\", deck = \"\"):\r\n    cardgame[gameID] = {'players': num_players, \"start_hour\": start_hour, 'rounds': rounds, 'end_hour': end_hour, \"deck\": deck}\r\n\r\ndef playergameround(gameID, round, jugadores = [], start_points = [], end_points = [], id_bank = \"\"):\r\n    for id in jugadores:\r\n        if id == id_bank:\r\n            stats = {'is_bank': True, 'bet_points': \"NULL\", 'starting_round_points': start_points,\r\n                    'cards_value': players[id][\"roundPoints\"], 'ending_round_points': end_points}\r\n        else:\r\n            stats = {'is_bank': False, 'bet_points': players[id][\"bet\"], 'starting_round_points': start_points,\r\n                     'cards_value': players[id][\"roundPoints\"], 'ending_round_points': end_points}\r\n        dict_pl = {id: stats}\r\n        dict_round = {round: dict_pl}\r\n        player_game_round[gameID] = dict_round\r\n\r\n\r\n# fill_player_game(generate_game_id(), list(setGamePriority(list(cartas), list(players))), card_id_list(setGamePriority(list(cartas)), list(players))),\r\n#                  [20,20,20,20], [3, 1, 45, 0])\r\n\r\ndef checkMinimun2PlayerWithPoints():\r\n    # Funcion que devuelve True si hay 2 o más jugadores con puntos, de lo contrario devuelve False\r\n\r\n    contador = 0\r\n    for i in game:\r\n        if players[i]['points'] > 0:\r\n            contador += 1\r\n\r\n    if contador < 2:\r\n        seguir_jugando = False\r\n    else:\r\n        seguir_jugando = True\r\n\r\n    return seguir_jugando\r\n\r\ndef orderAllPlayers():\r\n    # Funcion que crea una lista con los puntos de los jugadores y ordena la lista de jugadores de forma inversa segun su prioridad, pone la banca al principio\r\n    # POST: Devuelve una lista con los ID_player ordenados.\r\n    prioridad = []\r\n    for i in game:\r\n        prioridad.append(players[i]['priority'])\r\n\r\n    mida_llista = len(prioridad)\r\n\r\n    for i in range(mida_llista - 1):\r\n        for j in range(0, mida_llista - i - 1):\r\n            if prioridad[j] < prioridad[j + 1]:\r\n                prioridad[j], prioridad[j + 1] = prioridad[j + 1], prioridad[j]\r\n                game[j], game[j + 1] = game[j + 1], game[j]\r\n\r\n    for i in game:\r\n        if players[i]['bank']:\r\n            game.remove(i)\r\n            game.append(i)\r\n\r\n    return game\r\n\r\ndef setBets():\r\n    # Funcion que establece las apuestas según el tipo de jugador\r\n    for i in game:\r\n        if players[i]['bank'] is True:\r\n            players[i]['bet'] = 0\r\n        elif players[i]['points'] > 0:\r\n            players[i]['bet'] = math.ceil(players[i]['points'] / 100 * players[i]['type'])\r\n\r\n\r\n\r\ndef standardRound(id, mazo1, tirada_cartas = []):\r\n\r\n    while True:\r\n        if players[id]['bank'] == False:\r\n\r\n            if players[id]['roundPoints'] == 0:\r\n                nueva_carta = random.choice(mazo1)\r\n                mazo1.remove(nueva_carta)\r\n                tirada_cartas.append(nueva_carta)\r\n                players[id]['roundPoints'] += cartas[nueva_carta]['realValue']\r\n            else:\r\n                if chanceExceedingSevenAndHalf(id, mazo1) <= players[id]['type']:\r\n                    nueva_carta = random.choice(mazo1)\r\n                    mazo1.remove(nueva_carta)\r\n                    tirada_cartas.append(nueva_carta)\r\n                    players[id]['roundPoints'] += cartas[nueva_carta]['realValue']\r\n\r\n                else:\r\n                    return tirada_cartas\r\n        else:\r\n            tirar = 0\r\n            if baknOrderNewCard(id) or chanceExceedingSevenAndHalf(id, mazo1) <= players[id]['type']:\r\n\r\n                if len(tirada_cartas) == 0:\r\n                    nueva_carta = random.choice(mazo1)\r\n                    mazo1.remove(nueva_carta)\r\n                    tirada_cartas.append(nueva_carta)\r\n                    players[id]['roundPoints'] += cartas[nueva_carta]['realValue']\r\n                else:\r\n\r\n                    for i in game:\r\n                        if players[i]['bank'] is False:\r\n                            if 7.5 >= players[i]['roundPoints'] > players[id]['roundPoints']:\r\n                                tirar += 1\r\n                    if tirar > 0:\r\n                        nueva_carta = random.choice(mazo1)\r\n                        mazo1.remove(nueva_carta)\r\n                        tirada_cartas.append(nueva_carta)\r\n                        players[id]['roundPoints'] += cartas[nueva_carta]['realValue']\r\n\r\n            else:\r\n                return tirada_cartas\r\n\r\n\r\ndef getOpt(textOpts=\"\", inputOptText=\"\", rangeList=[], exceptions=[]):\r\n    # PRE: Al parámetro textOpts se le pasa el string con las opciones del menú\r\n    #      Al parámetro inputOpt se le pasa el string con la frase que pide que escojamos una opción\r\n    #      El parámetro RangeList contiene las opciones contempladas por el menu\r\n    #      El parámetro exceptions contiene las posibles excepciones que pueden generarse\r\n    # POST: Devolverá un valor de RangeList si la selección es correcta y devolverá un valor de exceptions si ha ocurrido\r\n    #       un error\r\n    correct = False\r\n    opc = ''\r\n    input_text = ''.ljust(50) + inputOptText\r\n    while not correct:\r\n        clear()\r\n        print(textOpts)\r\n        opc = input(input_text)\r\n        if opc in exceptions:\r\n            correct = True\r\n        else:\r\n            try:\r\n                opc = int(opc)\r\n                if opc not in rangeList and opc not in exceptions:\r\n                    raise TypeError(incorrectopt)\r\n                else:\r\n                    correct = True\r\n            except ValueError:\r\n                print(onlynumbers)\r\n                input(enter)\r\n            except TypeError as e:\r\n                print(e)\r\n                input(enter)\r\n    return opc\r\n\r\n\r\ndef func_text_opts(text='', header=''):\r\n    if header == '':\r\n        seq = '\\n'\r\n    else:\r\n        seq = header + '\\n\\n'\r\n    optlist = text.split(',')\r\n    for i in optlist:\r\n        seq += ''.ljust(50) + i + '\\n'\r\n    return seq\r\n\r\n\r\ndef orderPlayersByPoints(listaDNIs):\r\n    dic_PL_Points = {}\r\n    # Llamamos a una funcion que pida los DNI y calcule los puntos que tiene un jugador a la BBDD,\r\n    # y los devuelva en formato diccionario; dni: puntos\r\n\r\n    for pasada in range(listaDNIs - 1):\r\n        lista_ordenada = True\r\n        for i in range(len(listaDNIs) - 1 - pasada):\r\n            if dic_PL_Points[listaDNIs[i]] < dic_PL_Points[listaDNIs[i + 1]]:\r\n                lista_ordenada = False\r\n                aux = listaDNIs[i]\r\n                listaDNIs[i] = listaDNIs[i + 1]\r\n                listaDNIs[i + 1] = aux\r\n        if lista_ordenada:\r\n            break\r\n    return listaDNIs\r\n\r\n\r\ndef chanceExceedingSevenAndHalf(id, mazo2):\r\n    bad_cards = 0\r\n    for i in mazo2:\r\n        if cartas[i][\"realValue\"] + players[id][\"roundPoints\"] > 7.5:\r\n            bad_cards += 1\r\n\r\n    return (bad_cards * 100) / len(mazo2)\r\n\r\n\r\ndef printPlayerStats(id):\r\n    clear()\r\n    print('*'*140 + '\\n' + gameprint)\r\n    print(\" Stats of {} \".format(players[id][\"name\"]).center(140, \"*\"))\r\n    for i in players[id]:\r\n        if i == \"cards\":\r\n            print(str(i).ljust(55), end=\"\")\r\n            primero = True\r\n            for j in players[id][\"cards\"]:\r\n                if primero:\r\n                    primero = False\r\n                    print(str(j), sep=\"\", end=\"\")\r\n                else:\r\n                    print(\";\", str(j), sep=\"\", end=\"\")\r\n            print()\r\n        else:\r\n            print(str(i).ljust(55), str(players[id][i]).ljust(4), sep=\"\")\r\n\r\n\r\ndef baknOrderNewCard(id):\r\n    earnings = 0\r\n    looses = 0\r\n    ret = False\r\n    for i in game:\r\n        if i != id:\r\n            if (players[i][\"roundPoints\"] <= 7.5 and players[i][\"roundPoints\"] <= players[id][\"roundPoints\"]) or \\\r\n                    players[i][\"roundPoints\"] > 7.5:\r\n                earnings += players[i][\"bet\"]\r\n            else:\r\n                if players[i][\"roundPoints\"] == 7.5:\r\n                    looses += players[i][\"bet\"] * 2\r\n                else:\r\n                    looses += players[i][\"bet\"]\r\n    if looses - earnings >= players[id]['points']:\r\n        ret = True\r\n\r\n    return ret\r\n\r\n\r\ndef nif_validator():\r\n    # PRE:\r\n    # POST: Devuelve un NIF válido\r\n    correct = False\r\n    newnif = ''\r\n    while not correct:\r\n        try:\r\n            newnif = input('Introduce the NIF: ')\r\n            if not len(newnif) == 9:\r\n                raise ValueError('Invalid NIF length')\r\n            elif not newnif[:8].isdigit():\r\n                raise ValueError('Invalid NIF numbers')\r\n            elif not newnif[8].isalpha():\r\n                raise ValueError('Invalid NIF letter')\r\n            elif not letrasDni[int(newnif[:8]) % 23].casefold() == newnif[8].casefold():\r\n                raise ValueError('Incorrect NIF letter')\r\n            elif newnif.upper() in players:\r\n                raise ValueError('That NIF already exists in the database')\r\n            correct = True\r\n        except ValueError as e:\r\n            print(e)\r\n\r\n    return newnif.upper()\r\n\r\ndef savePlayer(tup_player):\r\n    query = \"INSERT INTO player (player_id, player_name, player_risk, human) VALUES (%s,%s,%s,%s);\"\r\n    cursor.execute(query, tup_player)\r\n    db.commit()\r\n\r\ndef getPlayers():\r\n    players.clear()\r\n    query = \"SELECT * FROM player;\"\r\n    cursor.execute(query)\r\n    result = cursor.fetchall()\r\n    for i in result:\r\n        dict_aux = {}\r\n        dni = i[0]\r\n        name = i[1]\r\n        profile = i[2]\r\n        if i[3] == 1:\r\n            human = True\r\n        else:\r\n            human = False\r\n        tup = newPlayer(dni, name, profile, human)\r\n        dict_aux = {tup[0]: tup[1]}\r\n        players.update(dict_aux)\r\n\r\ndef delBBDDPlayer(nif):\r\n    query = \"DELETE FROM player WHERE player_id = '\" + nif + \"';\"\r\n    cursor.execute(query)\r\n    db.commit()\r\n\r\ndef removeBBDDPlayer():\r\n    while True:\r\n        clear()\r\n        getPlayers()\r\n        showhPlayersBBDD()\r\n        opt = input(\"Option (-id to remove player, -1 to go back): \")\r\n        try:\r\n            if len(opt) < 2:\r\n                raise TypeError()\r\n            elif opt[0] == \"-\":\r\n                if opt[1] == \"1\" and len(opt) == 2:\r\n                    clear()\r\n                    break\r\n                elif len(opt) == 10 and opt[1:] in list(players.keys()):\r\n                    print(opt[1:])\r\n                    input()\r\n                    delBBDDPlayer(opt[1:])\r\n                else:\r\n                    raise TypeError()\r\n            else:\r\n                raise TypeError()\r\n        except TypeError:\r\n            print(\"Invalid Option\".center(140, \"=\"))\r\n            print(\" \" * 40, \"Enter to continue\".center(60), sep=\"\")\r\n            input(\"\")\r\n\r\ndef showhPlayersBBDD():\r\n    bots = []\r\n    humans = []\r\n    for id in players:\r\n        if players[id][\"human\"]:\r\n            humans.append(id)\r\n        else:\r\n            bots.append(id)\r\n    if len(humans) > 0:\r\n        order_list(humans, \"asc\")\r\n    if len(bots) > 0:\r\n        order_list(bots, \"asc\")\r\n    print(\"Select Players\".center(140, \"*\"))\r\n    print(\"Bot Players\".center(69), \"||\", \"Human Players\".center(69), \"\\n\", \"-\"*140,  sep=\"\")\r\n    print(\"ID\".ljust(11), \" \"*9, \"Name\".ljust(18), \" \"*5, \"Type\".ljust(26), \"||\", \"ID\".ljust(11), \" \"*9, \"Name\".ljust(15), \" \"*5, \"Type\".ljust(26), sep=\"\")\r\n    print(\"*\"*140)\r\n\r\n    while len(bots) > 0 or len(humans) > 0:\r\n        string = \"\"\r\n        if len(bots) > 0:\r\n            string = bots[0].ljust(11) + \" \"*9 + players[bots[0]][\"name\"].ljust(18) + \" \"*5\r\n            if players[bots[0]][\"type\"] == 30:\r\n                string += \"Cautious\".ljust(26)\r\n            elif players[bots[0]][\"type\"] == 40:\r\n                string += \"Moderated\".ljust(26)\r\n            elif players[bots[0]][\"type\"] == 50:\r\n                string += \"Bold\".ljust(26)\r\n            bots.remove(bots[0])\r\n        else:\r\n            string = \" \"*69\r\n        string += \"||\"\r\n        if len(humans) > 0:\r\n            string += humans[0].ljust(11) + \" \" * 9 + players[humans[0]][\"name\"].ljust(15) + \" \" * 5\r\n            if players[humans[0]][\"type\"] == 30:\r\n                string += \"Cautious\".ljust(26)\r\n            elif players[humans[0]][\"type\"] == 40:\r\n                string += \"Moderated\".ljust(26)\r\n            elif players[humans[0]][\"type\"] == 50:\r\n                string += \"Bold\".ljust(26)\r\n            humans.remove(humans[0])\r\n        print(string)\r\n    print(\"*\"*140)\r\n\r\ndef addRemovePlayers():\r\n    while True:\r\n        opt = getOpt(func_text_opts(add_remove_text, bbddplayers), opt_text, [1, 2, 3, 4])\r\n        if opt == 1:\r\n            tup_player = setNewPlayer()\r\n            savePlayer(tup_player)\r\n        elif opt == 2:\r\n            tup_player = setNewPlayer(human = False)\r\n            savePlayer(tup_player)\r\n        elif opt == 3:\r\n            removeBBDDPlayer()\r\n        elif opt == 4:\r\n            return False\r\n\r\n\r\ndef setMaxRounds():\r\n    correct = False\r\n    rounds = 5\r\n    while not correct:\r\n        clear()\r\n        print(setmaxrounds)\r\n        rounds = input(''.ljust(60)+\"Max Rounds: \")\r\n        if not rounds.isdigit():\r\n            print(''.ljust(60)+\"Please, only introduce numbers\")\r\n            input(''.ljust(60)+'Enter to continue')\r\n        elif int(rounds) <= 0:\r\n            print(''.ljust(60)+\"Please, introduce a number bigger than 0\")\r\n            input(''.ljust(60)+'Enter to continue')\r\n        else:\r\n            correct = True\r\n\r\n            print(''.ljust(60)+'Established maximum of rounds to', rounds)\r\n            input(''.ljust(60)+'Enter to continue')\r\n    contextGame[\"maxRounds\"] = int(rounds)\r\n\r\n\r\ndef tipo_de_riesgo(id):\r\n    riesgo = ''\r\n    if players[id]['type'] == 30:\r\n        riesgo = 'Cautious'\r\n    elif players[id]['type'] == 40:\r\n        riesgo = 'Moderated'\r\n    elif players[id]['type'] == 50:\r\n        riesgo = 'Bold'\r\n\r\n    return riesgo\r\n\r\ndef bot_or_human(dni):\r\n    if players[dni]['human'] is True:\r\n        return 'Human'\r\n    elif players[dni]['human'] is False:\r\n        return 'Bot'\r\n\r\ndef setPlayersGame():\r\n    clear()\r\n    actualPlayers = setgameplayers + '\\n' * 3 + '********************** Actual Players In Game **********************'.center(\r\n        140) + '\\n'\r\n\r\n    textinput = 'Option (id to add to game, -id to remove player, sh to show actual players in game, -1 to go back):\\n'\r\n    jugadores_not_in_game = list(players)\r\n    for i in game:\r\n        if i in jugadores_not_in_game:\r\n            jugadores_not_in_game.remove(i)\r\n    if len(game) == 0:\r\n        actualPlayers += 'There is no players in game'.center(140)\r\n    else:\r\n        for i in game:\r\n            centrar_texto = str(i).ljust(12) + '  ' + players[i]['name'].ljust(30) + '  ' + bot_or_human(i).ljust(8) + \\\r\n                            '  ' + tipo_de_riesgo(i).ljust(12)\r\n            actualPlayers += centrar_texto.center(140) + '\\n'\r\n    print(actualPlayers)\r\n    input(enter)\r\n\r\n    while True:\r\n        clear()\r\n        actualPlayers = '\\n' * 3 + '********************** Actual Players In Game **********************'.center(140) + '\\n'\r\n        bots = []\r\n        humans = []\r\n        for i in jugadores_not_in_game:\r\n            if players[i]['human'] is True:\r\n                humans.append(i)\r\n            else:\r\n                bots.append(i)\r\n        tabla_jugadores = set_game_players_cabecera\r\n\r\n        for humanos, boots in itertools.zip_longest(humans, bots, fillvalue=None):\r\n            if boots is None:\r\n                tabla_jugadores += ''.ljust(14) + '  ' + \\\r\n                                   ''.ljust(30) + '  ' + ''.ljust(20) + ' ' + '||' + '  ' + humanos.ljust(14) + '  ' + \\\r\n                                   players[humanos]['name'].ljust(30) + '  ' + tipo_de_riesgo(humanos).ljust(\r\n                    18) + ' ' + '\\n'\r\n            elif humanos is None:\r\n                tabla_jugadores += boots.ljust(14) + '  ' + \\\r\n                                   players[boots]['name'].ljust(30) + '  ' + tipo_de_riesgo(boots).ljust(20) \\\r\n                                   + ' ' + '||' + '  ' + ''.ljust(14) + '  ' + ''.ljust(30) + '  ' + ''.ljust(\r\n                    18) + ' ' + '\\n'\r\n            else:\r\n                tabla_jugadores += boots.ljust(14) + '  ' + \\\r\n                                   players[boots]['name'].ljust(30) + '  ' + tipo_de_riesgo(boots).ljust(20) \\\r\n                                   + ' ' + '||' + '  ' + humanos.ljust(14) + '  ' + \\\r\n                                   players[humanos]['name'].ljust(30) + '  ' + tipo_de_riesgo(humanos).ljust(\r\n                    18) + ' ' + '\\n'\r\n        tabla_jugadores += '*' * 140\r\n\r\n        print(tabla_jugadores)\r\n        nuevo_jugador = input(textinput)\r\n        if len(nuevo_jugador) == 0:\r\n            print(invalidoption)\r\n            input(enter)\r\n        else:\r\n            if nuevo_jugador.upper() in jugadores_not_in_game:\r\n                if len(game) == 6:\r\n                    print('\\n'+'Maxim number of players in game reached!!'.center(140)+'\\n')\r\n                else:\r\n                    game.append(nuevo_jugador.upper())\r\n                    jugadores_not_in_game.remove(nuevo_jugador.upper())\r\n\r\n            elif nuevo_jugador[0] == '-' and nuevo_jugador[1:].upper() in game:\r\n                game.remove(nuevo_jugador[1:].upper())\r\n                jugadores_not_in_game.append(nuevo_jugador[1:].upper())\r\n            elif nuevo_jugador == 'sh':\r\n                pass\r\n            else:\r\n                try:\r\n                    if int(nuevo_jugador) == -1:\r\n                        break\r\n                    else:\r\n                        print(invalidoption)\r\n                        input(enter)\r\n                        continue\r\n                except ValueError:\r\n                    print(invalidoption)\r\n                    input(enter)\r\n                    continue\r\n            if len(game) == 0:\r\n                actualPlayers += 'There is no players in game'.center(140)\r\n            else:\r\n                for i in game:\r\n                    centrar_texto = str(i).ljust(12) + '  ' + players[i]['name'].ljust(30) + '  ' + bot_or_human(\r\n                        i).ljust(8) + '  ' + tipo_de_riesgo(i).ljust(12)\r\n                    actualPlayers += centrar_texto.center(140) + '\\n'\r\n            print(actualPlayers)\r\n            input(enter)\r\n\r\n\r\ndef showhPlayersBBDD():\r\n    bots = []\r\n    humans = []\r\n    for id in players:\r\n        if players[id][\"human\"]:\r\n            humans.append(id)\r\n        else:\r\n            bots.append(id)\r\n    if len(humans) > 0:\r\n        order_list(humans, \"asc\")\r\n    if len(bots) > 0:\r\n        order_list(bots, \"asc\")\r\n    print(\"Select Players\".center(140, \"*\"))\r\n    print(\"Bot Players\".center(69), \"||\", \"Human Players\".center(69), \"\\n\", \"-\"*140,  sep=\"\")\r\n    print(\"ID\".ljust(11), \" \"*9, \"Name\".ljust(18), \" \"*5, \"Type\".ljust(26), \"||\", \"ID\".ljust(11), \" \"*9, \"Name\".ljust(15), \" \"*5, \"Type\".ljust(26), sep=\"\")\r\n    print(\"*\"*140)\r\n\r\n    while len(bots) > 0 or len(humans) > 0:\r\n        string = \"\"\r\n        if len(bots) > 0:\r\n            string = bots[0].ljust(11) + \" \"*9 + players[bots[0]][\"name\"].ljust(18) + \" \"*5\r\n            if players[bots[0]][\"type\"] == 30:\r\n                string += \"Cautious\".ljust(26)\r\n            elif players[bots[0]][\"type\"] == 40:\r\n                string += \"Moderated\".ljust(26)\r\n            elif players[bots[0]][\"type\"] == 50:\r\n                string += \"Bold\".ljust(26)\r\n            bots.remove(bots[0])\r\n        else:\r\n            string = \" \"*69\r\n        string += \"||\"\r\n        if len(humans) > 0:\r\n            string += humans[0].ljust(11) + \" \" * 9 + players[humans[0]][\"name\"].ljust(15) + \" \" * 5\r\n            if players[humans[0]][\"type\"] == 30:\r\n                string += \"Cautious\".ljust(26)\r\n            elif players[humans[0]][\"type\"] == 40:\r\n                string += \"Moderated\".ljust(26)\r\n            elif players[humans[0]][\"type\"] == 50:\r\n                string += \"Bold\".ljust(26)\r\n            humans.remove(humans[0])\r\n        print(string)\r\n    print(\"*\"*140)\r\n\r\n#editar para evitar que se repitan dnis\r\ndef newRandomDNI():\r\n    correct = True\r\n    DNI = ''\r\n    while correct:\r\n        DNI = random.randint(10000000, 99999999)\r\n        letra = letrasDni[DNI % 23]\r\n        DNI = str(DNI) + letra.upper()\r\n        if DNI not in list(players):\r\n            correct = False\r\n\r\n    return DNI\r\n\r\ndef setNewPlayer(human=True):\r\n    dni = \"\"\r\n    profile = 0\r\n    name = \"\"\r\n    if human:\r\n        dni = nif_validator()\r\n    else:\r\n        dni = newRandomDNI()\r\n\r\n    opt = getOpt(\"Select your Profile:,1)Cautious,2)Moderated,3)Bold\", \"Option\", [1, 2, 3])\r\n    if opt == 1:\r\n        profile = 30\r\n    elif opt == 2:\r\n        profile = 40\r\n    else:\r\n        profile = 50\r\n\r\n    correct = False\r\n    while not correct:\r\n        name = input(\"Name: \")\r\n        if not name.isalnum():\r\n            print(\"Incorrect name, please, enter a name not empty with only letters\")\r\n        else:\r\n            correct = True\r\n    tup_player = (dni, name, profile, human)\r\n    return tup_player\r\n\r\n\r\ndef newPlayer(dni, name, profile, human):\r\n    dic_aux = {\"name\": name, \"human\": human, \"bank\": False, \"initialCard\": \"\", \"priority\": 0, \"type\": profile,\r\n               \"bet\": 4, \"points\": 0, \"cards\": [], \"roundPoints\": 0}\r\n    return (dni, dic_aux)\r\n\r\n\r\ndef printStats(titulo_superior=\"\", titulo_inferior=''):\r\n    clear()\r\n    # PREGUNTAR LAS VARIABLES\r\n    print(titulo_superior.center(140, \"*\"))\r\n    print(gameprint)\r\n    print(titulo_inferior.center(140, \"*\"))\r\n    lista = [\"Name\", \"Human\", \"Priority\", \"Type\", \"Bank\", \"Bet\", \"Points\", \"Cards\", \"Roundpoints\"]\r\n    arguments = [\"name\", \"human\", \"priority\", \"type\", \"bank\", \"bet\", \"points\", \"cards\", \"roundPoints\"]\r\n    for i in range(0, 9):\r\n        seq = lista[i].ljust(20) + \" \"*5\r\n        for j in game:\r\n            if arguments[i] != \"cards\":\r\n                seq += str(players[j][arguments[i]]).ljust(40)\r\n            else:\r\n                cards = \"\"\r\n                primero = True\r\n                for k in players[j][\"cards\"]:\r\n                    if primero:\r\n                        primero = False\r\n                        cards += k\r\n                    else:\r\n                        cards += \";\" + k\r\n                seq += cards.ljust(40)\r\n        print(seq)\r\n\r\ndef set_card_deck():\r\n    query = \"select deck_id from deck;\"\r\n    cursor.execute(query)\r\n    result = cursor.fetchall()\r\n    id_deck = []\r\n    seq = \"\"\r\n    primero = True\r\n    for id in result:\r\n        if primero:\r\n            primero = False\r\n            id_deck.append(id[0])\r\n            seq += id[0]\r\n        else:\r\n            id_deck.append(id[0])\r\n            seq += \",\" + id[0]\r\n\r\n    opt = getOpt(func_text_opts(seq, deckofcards), 'Option(-1 to go back): ', [-1], id_deck)\r\n    print(''.ljust(50) + 'The deck {} has been chosen.'.format(opt))\r\n    if opt == -1:\r\n        print(''.ljust(50) + 'Deck not chosen.')\r\n        input(enter)\r\n    else:\r\n        query = \"select * from card where deck_id = %s;\"\r\n        cursor.execute(query, (opt,))\r\n        result = cursor.fetchall()\r\n        contextGame['deck'] = opt\r\n\r\n        for row in result:\r\n            dict_aux = {\"literal\": row[1], \"value\": row[2], \"priority\": row[3], \"realValue\": row[4]}\r\n            cartas[row[0]] = dict_aux\r\n        input(enter)\r\n\r\ndef distributionPointAndNewBankCandidates(banco, sorted_players_main=[]):\r\n    # SUSTITUIR CODIGO DE JUEGO ACTUAL POR ESTA FUNCION\r\n\r\n    # Los puntos que pierden los jugadores se les resta inmediatamente, los que ganan se les suma en funcion de la\r\n    # prioridad, la banca hace una resta entre los puntos ganados y perdidos y se suma o resta el resultado.\r\n    # Establecemos la nueva banca y eliminamos los jugadores sin puntos.\r\n\r\n    candidatos_banca = []\r\n    nueva_banca = False\r\n    banca_debe = 0\r\n    banca_cobra = 0\r\n    sieteymedio = []\r\n\r\n    sorted_players = sorted_players_main.copy()\r\n    sorted_players.reverse()\r\n    sorted_players.remove(banco)\r\n    jugadores_para_cobrar = []\r\n    if players[banco]['roundPoints'] == 7.5:\r\n        for j in sorted_players:\r\n            banca_cobra += players[j]['bet']\r\n            players[j]['points'] -= players[j]['bet']\r\n\r\n\r\n    elif players[banco]['roundPoints'] < 7.5:\r\n        for j in sorted_players:\r\n            if players[banco]['roundPoints'] < players[j]['roundPoints'] < 7.5:\r\n                banca_debe += players[j]['bet']\r\n                jugadores_para_cobrar.append(j)\r\n            elif players[banco]['roundPoints'] > players[j]['roundPoints']:\r\n                banca_cobra += players[j]['bet']\r\n                players[j]['points'] -= players[j]['bet']\r\n            elif players[banco]['roundPoints'] == players[j]['roundPoints']:\r\n                banca_cobra += players[j]['bet']\r\n                players[j]['points'] -= players[j]['bet']\r\n            elif players[j]['roundPoints'] > 7.5:\r\n                banca_cobra += players[j]['bet']\r\n                players[j]['points'] -= players[j]['bet']\r\n            elif players[j]['roundPoints'] == 7.5:\r\n                banca_debe += players[j]['bet'] * 2\r\n                jugadores_para_cobrar.append(j)\r\n                jugadores_para_cobrar.append(j)\r\n                candidatos_banca.append(j)\r\n                nueva_banca = True\r\n\r\n\r\n\r\n    elif players[banco]['roundPoints'] > 7.5:\r\n        for j in sorted_players:\r\n            if players[j]['roundPoints'] < 7.5:\r\n                banca_debe += players[j]['bet']\r\n                jugadores_para_cobrar.append(j)\r\n            elif players[j]['roundPoints'] == 7.5:\r\n                banca_debe += players[j]['bet'] * 2\r\n                candidatos_banca.append(j)\r\n                jugadores_para_cobrar.append(j)\r\n                jugadores_para_cobrar.append(j)\r\n                nueva_banca = True\r\n\r\n\r\n    dinero_restante = players[banco]['points'] + banca_cobra\r\n\r\n    if dinero_restante < banca_debe:\r\n        for i in jugadores_para_cobrar:\r\n            if dinero_restante >= players[i]['bet']:\r\n                players[i]['points'] += players[i]['bet']\r\n                dinero_restante -= players[i]['bet']\r\n            else:\r\n                players[i]['points'] += dinero_restante\r\n                dinero_restante = 0\r\n\r\n        players[banco]['points'] = 0\r\n        players[banco]['bank'] = False\r\n        nueva_banca = True\r\n\r\n\r\n    else:\r\n        players[banco]['points'] += banca_cobra - banca_debe\r\n        if len(jugadores_para_cobrar) > 0:\r\n            for i in jugadores_para_cobrar:\r\n                players[i]['points'] += players[i]['bet']\r\n\r\n    for indice in range(len(game) -1, -1, -1):\r\n        if players[game[indice]]['points'] < 1:\r\n            game.remove(game[indice])\r\n\r\n    if nueva_banca:\r\n        players[banco]['bank'] = False\r\n        lista_ordenada = orderAllPlayers().copy()\r\n        for i in lista_ordenada:\r\n            if i not in candidatos_banca:\r\n                lista_ordenada.remove(i)\r\n        if len(lista_ordenada) > 0:\r\n            for i in lista_ordenada:\r\n                if players[i]['roundPoints'] == 7.5:\r\n                    sieteymedio.insert(0, i)\r\n            if len(sieteymedio) > 0:\r\n                players[sieteymedio[0]]['bank'] = True\r\n            else:\r\n                players[lista_ordenada[-1]]['bank'] = True\r\n        else:\r\n            players[orderAllPlayers()[-1]]['bank'] = True\r\n\r\n\r\n# USAR UNA FUNCION PARA CADA COSA, QUE NO DEJE SALIR HASTA QUE HAYAN 2 PLAYERS EN \"GAME\" Y UNA BARAJA ESCOGIDA,\r\n# DEFAULT ROUND SETTINGS = 5\r\ndef settings():\r\n    while True:\r\n        option = getOpt(func_text_opts(opts_settings, settings_print), opt_text, list(range(1, 5)))\r\n        if option == 1:\r\n            setPlayersGame()\r\n        elif option == 2:\r\n            set_card_deck()\r\n        elif option == 3:\r\n            setMaxRounds()\r\n        elif option == 4:\r\n            return False\r\n\r\ndef reset_stats():\r\n    for i in game:\r\n        players[i]['roundPoints'] = 0\r\n        players[i]['cards'] = []\r\n\r\ndef reset_bets():\r\n    for i in game:\r\n        players[i]['bet'] = 0\r\n\r\ndef winner():\r\n    if len(game) > 1:\r\n        winner_id = game.copy()\r\n        for pasada in range(len(winner_id) - 1):\r\n            lista_ordenada = True\r\n            for i in range(len(winner_id) - 1 - pasada):\r\n                if players[game[i]][\"points\"] < players[game[i+1]][\"points\"]:\r\n                    lista_ordenada = False\r\n                    aux = winner_id[i]\r\n                    winner_id[i] = winner_id[i + 1]\r\n                    winner_id[i + 1] = aux\r\n            if lista_ordenada:\r\n                break\r\n\r\n        return winner_id[0]\r\n    else:\r\n        return game[0]\r\n\r\n\r\ndef turn_of_human(ronda, player_id, numero_ronda, mazo1):\r\n    tirada_cartas = []\r\n    while True:\r\n        option = getOpt(func_text_opts(human_opts, ronda), opt_text, list(range(1, 7)))\r\n        if option == 1:\r\n            printPlayerStats(player_id)\r\n            input(enter)\r\n        elif option == 2:\r\n            printStats(titulo_inferior=' Round {}, Turn of {} '.format(numero_ronda, players[player_id]['name']))\r\n            input(enter)\r\n        elif option == 3:\r\n            new_bet = 0\r\n            correct = False\r\n            clear()\r\n            while not correct:\r\n                try:\r\n                    new_bet = int(input(''.ljust(50) + 'Set new Bet: '))\r\n                    if new_bet > players[player_id]['points'] or new_bet < 1:\r\n                        raise TypeError(''.ljust(50)+'The new bet has to be between 1 and {}'.format(players[player_id]['points']))\r\n                    else:\r\n                        correct = True\r\n                except ValueError:\r\n                    print(''.ljust(50)+'Please, introduce only numbers')\r\n\r\n                except TypeError as e:\r\n                    print(e)\r\n            players[player_id]['bet'] = new_bet\r\n            input(enter)\r\n        elif option == 4:\r\n            print(''.ljust(50) + 'Order Card')\r\n            if len(tirada_cartas) == 0:\r\n                nueva_carta = random.choice(mazo1)\r\n                mazo1.remove(nueva_carta)\r\n                tirada_cartas.append(nueva_carta)\r\n                players[player_id]['roundPoints'] += cartas[nueva_carta]['realValue']\r\n                print(''.ljust(50) + 'The new card is {}'.format(cartas[nueva_carta]['literal']))\r\n                print(''.ljust(50) + 'Now you have {} points'.format(players[player_id]['roundPoints']))\r\n                input(ljust_enter)\r\n            else:\r\n                print(''.ljust(50) + 'Chance of exceeding 7.5 = {:.2f}%'.format(chanceExceedingSevenAndHalf(player_id, mazo1)))\r\n                sure = input(''.ljust(50) + 'Are you sure you want to order a new card? Y/y = Yes, another key = Not: ')\r\n                if players[player_id]['roundPoints'] < 7.5:\r\n                    if sure.casefold() == 'y':\r\n                        nueva_carta = random.choice(mazo1)\r\n                        mazo1.remove(nueva_carta)\r\n                        tirada_cartas.append(nueva_carta)\r\n                        players[player_id]['roundPoints'] += cartas[nueva_carta]['realValue']\r\n                        print(''.ljust(50) + 'The new card is {}'.format(cartas[nueva_carta]['literal']))\r\n                        print(''.ljust(50) + 'Now you have {} points'.format(players[player_id]['roundPoints']))\r\n\r\n                    else:\r\n                        print(''.ljust(50) + 'Card not ordered')\r\n\r\n                elif sure.casefold() == 'y':\r\n                    print(''.ljust(50) + \"You have exceed 7.5 points! You're not allowed to order another card.\")\r\n                else:\r\n                    print(''.ljust(50) + 'Card not ordered')\r\n                input(ljust_enter)\r\n            players[player_id]['cards'] = tirada_cartas\r\n        elif option == 5:\r\n            players[player_id]['cards'] = (standardRound(player_id, mazo1, tirada_cartas))\r\n            printStats(titulo_inferior=' Round {}, Turn of {} '.format(numero_ronda, players[player_id]['name']))\r\n            input(enter)\r\n            break\r\n        elif option == 6:\r\n            printStats(titulo_inferior=' Round {}, Turn of {} '.format(numero_ronda, players[player_id]['name']))\r\n            input(enter)\r\n            break\r\n\r\ndef play_game():\r\n    ini_hour = datetime.datetime.now()\r\n    send = False\r\n    print(\"SEND = FALSE; CAMBIAR!!!!!\")\r\n    resetPoints()\r\n    banca_debe = 0\r\n    banca = ''\r\n    order = setGamePriority(list(cartas), game)\r\n    jugadores_ordenados = []\r\n    ply_perma = []\r\n    ini_cards = []\r\n    for tup in order:\r\n        ply_perma.append(tup[0])\r\n        ini_cards.append(tup[1])\r\n    priority = 0\r\n    gameID = generate_game_id()\r\n    for i in order:\r\n        jugadores_ordenados.append(i[0])\r\n        priority += 1\r\n        players[i[0]]['priority'] = priority\r\n        players[i[0]]['initialCard'] = i[1]\r\n        if priority == 1:\r\n            banca = i[0]\r\n            players[i[0]]['bank'] = True\r\n    rounds = 0\r\n    for i in range(0, contextGame['maxRounds']):\r\n        mazo = list(cartas)\r\n        rounds += 1\r\n        reset_stats()\r\n        setBets()\r\n        if i == 0:\r\n            printStats(titulo_superior=' ROUND 1 ')\r\n            input(enter)\r\n        jugadores_ordenados = orderAllPlayers()\r\n        # ORDENAR JUGADORES EN JUGADORES_ORDENADOS CADA RONDA\r\n        start_pts = []\r\n        for id in jugadores_ordenados:\r\n            start_pts.append(players[id][\"points\"])\r\n        # GUARDAMOS LOS PUNTOS INICIALES\r\n\r\n        for jugador in jugadores_ordenados:\r\n            if players[jugador]['human'] is True:\r\n                imprimir_ronda = '*'*140 + '\\n' + gameprint + ' Round {}, Turn of {} '.format(i+1, players[jugador]['name']).center(140, '*')\r\n                turn_of_human(imprimir_ronda, jugador, rounds, mazo)\r\n            else:\r\n                players[jugador]['cards'] = (standardRound(jugador, mazo))\r\n                printStats(titulo_inferior=' Round {}, Turn of {} '.format(i+1, players[jugador]['name']))\r\n                input(enter)\r\n        distributionPointAndNewBankCandidates(banca, jugadores_ordenados)\r\n\r\n        end_pts_round = []\r\n        for id in jugadores_ordenados:\r\n            end_pts_round.append(players[id][\"points\"])\r\n        # GUARDAMOS LOS PUNTOS FINALES\r\n\r\n        playergameround(gameID, rounds, jugadores_ordenados, start_pts, end_pts_round, banca)\r\n\r\n        reset_bets()\r\n        for j in game:\r\n            if players[j]['bank'] is True:\r\n                banca = j\r\n        printStats(titulo_superior=' STATS AFTER ROUND {} '.format(i+1))\r\n\r\n        if not checkMinimun2PlayerWithPoints():\r\n            break\r\n        out = input('Enter to continue to new Round, exit to leave the game: ')\r\n\r\n        if out == 'exit':\r\n            send = False\r\n            break\r\n    str_pts = []\r\n    end_pts = []\r\n\r\n    for id in ply_perma:\r\n        str_pts.append(20)\r\n        if players[id][\"points\"] < 20:\r\n            end_pts.append(players[id][\"points\"] - 20)\r\n        else:\r\n            end_pts.append(players[id][\"points\"])\r\n    end_hour = datetime.datetime.now()\r\n    fill_player_game(gameID, ply_perma, ini_cards, str_pts, end_pts)\r\n    fill_cardgame(gameID, len(ply_perma), str(ini_hour), rounds, str(end_hour), contextGame[\"deck\"])\r\n\r\n    print(gameover)\r\n    print('The winner is {} - {}, in {} rounds, with {} points.'.format(winner(), players[winner()]['name'], rounds,\r\n                                                                        players[winner()]['points']).center(140))\r\n    if send:\r\n        query = \"INSERT INTO cardgame (cardgame_id, players, rounds, start_hour, end_hour, deck_id) \" \\\r\n                \"VALUES (%s,%s,%s,%s,%s,%s)\"\r\n        cursor.execute(query, (gameID, cardgame[gameID][\"players\"], cardgame[gameID][\"rounds\"], cardgame[gameID][\"start_hour\"],\r\n                               cardgame[gameID][\"end_hour\"], cardgame[gameID][\"deck\"]))\r\n        db.commit()\r\n\r\n        for id in player_game[gameID]:\r\n            query = \"INSERT INTO player_game (cardgame_id, player_id, initial_card_id, starting_points, ending_points)\" \\\r\n                    \"VALUES (%s,%s,%s,%s,%s)\"\r\n            cursor.execute(query, (gameID, id, player_game[gameID][id][\"initial_card_id\"], player_game[gameID][id][\"starting_points\"],\r\n                                   player_game[gameID][id][\"ending_points\"]))\r\n            db.commit()\r\n        for round in player_game_round[gameID]:\r\n            for id in player_game_round[gameID][round]:\r\n                query = \"INSERT INTO player_game_round (cardgame_id, round_num, player_id, is_bank, bet_points, cards_value,\" \\\r\n                        \"starting_round_points, ending_round_points) VALUES (%s,%s,%s,%s,%s,%s,%s,%s)\"\r\n                cursor.execute(query, (gameID, round, id, player_game_round[gameID][round][\"is_bank\"],\r\n                                       player_game_round[gameID][round][\"bet_points\"],\r\n                                       player_game_round[gameID][round][\"cards_value\"],\r\n                                       player_game_round[gameID][round][\"starting_round_points\"],\r\n                                       player_game_round[gameID][round][\"ending_round_points\"]))\r\n                db.commit()\r\n    input(enter)\r\n    game.clear()\r\n\r\n\r\n\r\ndef reports():\r\n    seq = \"1)Number of players who have been bank in each game,2)Average bet in each game,\" \\\r\n          \"3)Average bet in the first round in each game,4)Average bet in the last round in each game,\" \\\r\n          \"5)Player who places the lowest bet per game,6)List of games won by Bots,\" \\\r\n          \"7)Player who places the highest wager in each game\"\r\n    opt = getOpt(func_text_opts(seq, reports_header), \"Option(0 to go back): \", [0, 1, 2, 3, 4, 5, 6, 7])\r\n    if opt == 1:\r\n        clear()\r\n        print(\"Number of players who have been bank in each game\")\r\n        query = \"select pb.cardgame_id, count(pb.player_id) from (select player_id, cardgame_id from player_game_round where is_bank = 1 group by player_id, cardgame_id) as pb group by cardgame_id;\"\r\n        cursor.execute(query)\r\n        result = cursor.fetchall()\r\n        print(\" \".ljust(50), \"Game ID\", \" \"*5, \"Number of Banks\", sep=\"\")\r\n        for row in result:\r\n            print(\" \".ljust(50), row[0], \" \"*10, row[1], sep=\"\")\r\n    elif opt == 2:\r\n        clear()\r\n        print(\"Average bet in each game\")\r\n        query = \"select pb.cardgame_id, avg(pb.bet_points) from (select cardgame_id, bet_points from player_game_round) as pb group by pb.cardgame_id;\"\r\n        cursor.execute(query)\r\n        result = cursor.fetchall()\r\n        print(\" \".ljust(50), \"Game ID\", \" \" * 5, \"Average bet\", sep=\"\")\r\n        for row in result:\r\n            print(\" \".ljust(50), row[0], \" \"*10, row[1], sep=\"\")\r\n    elif opt == 3:\r\n        clear()\r\n        print(\"Average bet in the first round in each game\")\r\n        query = \"select ab.cardgame_id, avg(ab.bet_points) from (select cardgame_id, bet_points from player_game_round where round_num = 1 and bet_points is not NULL) as ab group by ab.cardgame_id;\"\r\n        cursor.execute(query)\r\n        result = cursor.fetchall()\r\n        print(\" \".ljust(50), \"Game ID\", \" \" * 5, \"Average bet\", sep=\"\")\r\n        for row in result:\r\n            print(\" \".ljust(50), row[0], \" \"*10, row[1], sep=\"\")\r\n    elif opt == 4:\r\n        clear()\r\n        print(\"Average bet in the last round in each game\")\r\n        query = \"select p.cardgame_id, avg(p.bet_points) from (select cardgame_id, max(round_num) as last_round from player_game_round group by cardgame_id) as ab, player_game_round p  where p.cardgame_id = ab.cardgame_id and round_num = ab.last_round group by p.cardgame_id;\"\r\n        cursor.execute(query)\r\n        result = cursor.fetchall()\r\n        print(\" \".ljust(50), \"Game ID\", \" \" * 5, \"Average bet\", sep=\"\")\r\n        for row in result:\r\n            print(\" \".ljust(50), row[0], \" \"*10, row[1], sep=\"\")\r\n    elif opt == 5:\r\n        clear()\r\n        print(\"Player who places the lowest bet per game\")\r\n        query = \"select lb.cardgame_id, p.player_id, lb.min_bet from (select cardgame_id, min(bet_points) as min_bet from player_game_round where bet_points is not null group by cardgame_id) as lb, player_game_round p where p.cardgame_id = lb.cardgame_id and  p.bet_points = lb.min_bet;\"\r\n        cursor.execute(query)\r\n        result = cursor.fetchall()\r\n        print(\" \".ljust(50), \"Game ID\", \" \" * 5, \"Player NIF\", \" \" * 5, \"Bet\", sep=\"\")\r\n        for row in result:\r\n            print(\" \".ljust(50), row[0], \" \"*10, row[1], \" \"*10, row[2], sep=\"\")\r\n    elif opt == 6:\r\n        clear()\r\n        print(\"List of games won by Bots\")\r\n        query = \"select pg.cardgame_id, w.win_pts, pg.player_id from (select cardgame_id, max(ending_points) as win_pts from player_game group by cardgame_id) as w, player_game pg, player p where pg.cardgame_id = w.cardgame_id and p.player_id = pg.player_id and  pg.ending_points = w.win_pts and p.human = 0;\"\r\n        cursor.execute(query)\r\n        result = cursor.fetchall()\r\n        print(\" \".ljust(50), \"Game ID\", \" \" * 5, \"Points\", \" \" * 5, \"Bot NIF\", sep=\"\")\r\n        for row in result:\r\n            print(\" \".ljust(50), row[0], \" \" * 10, row[1], \" \" * 10, row[2], sep=\"\")\r\n    elif opt == 7:\r\n        clear()\r\n        print(\"Player who places the highest bet in each game\")\r\n        query = \"select lb.cardgame_id, p.player_id, lb.max_bet from (select cardgame_id, max(bet_points) as max_bet from player_game_round where bet_points is not null group by cardgame_id) as lb, player_game_round p where p.cardgame_id = lb.cardgame_id and  p.bet_points = lb.max_bet;\"\r\n        cursor.execute(query)\r\n        result = cursor.fetchall()\r\n        print(\" \".ljust(50), \"Game ID\", \" \" * 5, \"Player NIF\", \" \" * 5, \"Bet\", sep=\"\")\r\n        for row in result:\r\n            print(\" \".ljust(50), row[0], \" \" * 10, row[1], \" \" * 10, row[2], sep=\"\")\r\n\r\ndef getBBDDRanking():\r\n    query = \"SELECT * FROM player_earnings;\"\r\n    cursor.execute(query)\r\n    result = cursor.fetchall()\r\n    rank = {}\r\n    for row in result:\r\n        dict_aux = {\"earnings\": row[1], \"games_played\": row[2], \"minutes_played\": row[3]}\r\n        rank = {row[0]: dict_aux}\r\n    return rank\r\n\r\ndef returnListRanking(rank, field=\"earnings\"):\r\n    listR = list(rank.keys())\r\n    for pasada in range(len(listR) - 1):\r\n        lista_ordenada = True\r\n        for i in range(len(listR) - 1 - pasada):\r\n            if rank[listR[i]][field] < rank[listR[i + 1]][field]:\r\n                lista_ordenada = False\r\n                aux = listR[i]\r\n                listR[i] = listR[i + 1]\r\n                listR[i + 1] = aux\r\n        if lista_ordenada:\r\n            break\r\n    return listR\r\n\r\ndef ranking():\r\n    seq = \"1)Players With More Earnings,2)Players With More Games Played,3)Players With More Minutes Played,4)Go back\"\r\n    opt = getOpt(func_text_opts(seq, ranking_header), \"Option: \", [1, 2, 3, 4])\r\n    clear()\r\n    getPlayers()\r\n    rank = getBBDDRanking()\r\n    if opt == 1:\r\n        listR = returnListRanking(rank)\r\n        print(\" \" * 69, \"Name\".ljust(20), \" \" * 5, \"Earnings\")\r\n        for i in listR:\r\n            print(\" \"*69, players[i][\"name\"].ljust(20), \" \"*5, rank[i][\"earnings\"])\r\n    elif opt == 2:\r\n        listR = returnListRanking(rank, \"games_played\")\r\n        print(\" \" * 69, \"Name\".ljust(20), \" \" * 5, \"Games Played\")\r\n        for i in listR:\r\n            print(\" \" * 69, players[i][\"name\"].ljust(20), \" \" * 5, rank[i][\"games_played\"])\r\n    elif opt == 3:\r\n        listR = returnListRanking(rank, \"minutes_played\")\r\n        print(\" \" * 69, \"Name\".ljust(20), \" \" * 5, \"Minutes Played\")\r\n        for i in listR:\r\n            print(\" \" * 69, players[i][\"name\"].ljust(20), \" \" * 5, rank[i][\"minutes_played\"])
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/resources/funciones.py b/resources/funciones.py
--- a/resources/funciones.py	(revision 4eb2dcc83bdc04f4485e34c5b30ff631ad42c03a)
+++ b/resources/funciones.py	(date 1674393943000)
@@ -214,7 +214,7 @@
             tirar = 0
             if baknOrderNewCard(id) or chanceExceedingSevenAndHalf(id, mazo1) <= players[id]['type']:
 
-                if len(tirada_cartas) == 0:
+                if players[id]['roundPoints'] == 0:
                     nueva_carta = random.choice(mazo1)
                     mazo1.remove(nueva_carta)
                     tirada_cartas.append(nueva_carta)
@@ -347,6 +347,7 @@
 def nif_validator():
     # PRE:
     # POST: Devuelve un NIF válido
+    getPlayers()
     correct = False
     newnif = ''
     while not correct:
@@ -486,18 +487,18 @@
     while not correct:
         clear()
         print(setmaxrounds)
-        rounds = input(''.ljust(60)+"Max Rounds: ")
+        rounds = input(''.ljust(50)+"Max Rounds: ")
         if not rounds.isdigit():
-            print(''.ljust(60)+"Please, only introduce numbers")
-            input(''.ljust(60)+'Enter to continue')
-        elif int(rounds) <= 0:
-            print(''.ljust(60)+"Please, introduce a number bigger than 0")
-            input(''.ljust(60)+'Enter to continue')
+            print(''.ljust(50)+"Please, only introduce numbers")
+            input(''.ljust(50)+'Enter to continue')
+        elif int(rounds) <= 0 or int(rounds) > 30:
+            print(''.ljust(50)+"Please, introduce a number bigger than 0 and smaller than 30")
+            input(''.ljust(50)+'Enter to continue')
         else:
             correct = True
 
-            print(''.ljust(60)+'Established maximum of rounds to', rounds)
-            input(''.ljust(60)+'Enter to continue')
+            print(''.ljust(50)+'Established maximum of rounds to', rounds)
+            input(''.ljust(50)+'Enter to continue')
     contextGame["maxRounds"] = int(rounds)
 
 
@@ -519,6 +520,7 @@
         return 'Bot'
 
 def setPlayersGame():
+    getPlayers()
     clear()
     actualPlayers = setgameplayers + '\n' * 3 + '********************** Actual Players In Game **********************'.center(
         140) + '\n'
@@ -655,6 +657,7 @@
 
 #editar para evitar que se repitan dnis
 def newRandomDNI():
+    getPlayers()
     correct = True
     DNI = ''
     while correct:
@@ -671,11 +674,15 @@
     profile = 0
     name = ""
     if human:
-        dni = nif_validator()
+        opt = getOpt(func_text_opts("1)Random DNI,2)Custom DNI"), "Option: ", [1, 2])
+        if opt == 1:
+            dni = newRandomDNI()
+        else:
+            dni = nif_validator()
     else:
         dni = newRandomDNI()
 
-    opt = getOpt("Select your Profile:,1)Cautious,2)Moderated,3)Bold", "Option", [1, 2, 3])
+    opt = getOpt(func_text_opts("Select your Profile:,1)Cautious,2)Moderated,3)Bold"), "Option: ", [1, 2, 3])
     if opt == 1:
         profile = 30
     elif opt == 2:
@@ -972,6 +979,7 @@
             break
 
 def play_game():
+    getPlayers()
     ini_hour = datetime.datetime.now()
     send = False
     print("SEND = FALSE; CAMBIAR!!!!!")
Index: resources/bbdd_provisionales.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import datetime\r\n\r\ncartas = {\r\n    \"O01\": {\"literal\": \"As de Oros\", \"value\": 1, \"priority\": 4, \"realValue\": 1},\r\n    \"O02\": {\"literal\": \"Dos de Oros\", \"value\": 2, \"priority\": 4, \"realValue\": 2},\r\n    \"O03\": {\"literal\": \"Tres de Oros\", \"value\": 3, \"priority\": 4, \"realValue\": 3},\r\n    \"O04\": {\"literal\": \"Cuatro de Oros\", \"value\": 4, \"priority\": 4, \"realValue\": 4},\r\n    \"O05\": {\"literal\": \"Cinco de Oros\", \"value\": 5, \"priority\": 4, \"realValue\": 5},\r\n    \"O06\": {\"literal\": \"Seis de Oros\", \"value\": 6, \"priority\": 4, \"realValue\": 6},\r\n    \"O07\": {\"literal\": \"Siete de Oros\", \"value\": 7, \"priority\": 4, \"realValue\": 7},\r\n    \"O08\": {\"literal\": \"Ocho de Oros\", \"value\": 8, \"priority\": 4, \"realValue\": 0.5},\r\n    \"O09\": {\"literal\": \"Nueve de Oros\", \"value\": 9, \"priority\": 4, \"realValue\": 0.5},\r\n    \"O10\": {\"literal\": \"Sota de Oros\", \"value\": 10, \"priority\": 4, \"realValue\": 0.5},\r\n    \"O11\": {\"literal\": \"Caballo de Oros\", \"value\": 11, \"priority\": 4, \"realValue\": 0.5},\r\n    \"O12\": {\"literal\": \"Rey de Oros\", \"value\": 12, \"priority\": 4, \"realValue\": 0.5},\r\n\r\n    \"C01\": {\"literal\": \"As de Copas\", \"value\": 1, \"priority\": 3, \"realValue\": 1},\r\n    \"C02\": {\"literal\": \"Dos de Copas\", \"value\": 2, \"priority\": 3, \"realValue\": 2},\r\n    \"C03\": {\"literal\": \"Tres de Copas\", \"value\": 3, \"priority\": 3, \"realValue\": 3},\r\n    \"C04\": {\"literal\": \"Cuatro de Copas\", \"value\": 4, \"priority\": 3, \"realValue\": 4},\r\n    \"C05\": {\"literal\": \"Cinco de Copas\", \"value\": 5, \"priority\": 3, \"realValue\": 5},\r\n    \"C06\": {\"literal\": \"Seis de Copas\", \"value\": 6, \"priority\": 3, \"realValue\": 6},\r\n    \"C07\": {\"literal\": \"Siete de Copas\", \"value\": 7, \"priority\": 3, \"realValue\": 7},\r\n    \"C08\": {\"literal\": \"Ocho de Copas\", \"value\": 8, \"priority\": 3, \"realValue\": 0.5},\r\n    \"C09\": {\"literal\": \"Nueve de Copas\", \"value\": 9, \"priority\": 3, \"realValue\": 0.5},\r\n    \"C10\": {\"literal\": \"Sota de Copas\", \"value\": 10, \"priority\": 3, \"realValue\": 0.5},\r\n    \"C11\": {\"literal\": \"Caballo de Copas\", \"value\": 11, \"priority\": 3, \"realValue\": 0.5},\r\n    \"C12\": {\"literal\": \"Rey de Copas\", \"value\": 12, \"priority\": 3, \"realValue\": 0.5},\r\n\r\n    \"E01\": {\"literal\": \"As de Espadas\", \"value\": 1, \"priority\": 2, \"realValue\": 1},\r\n    \"E02\": {\"literal\": \"Dos de Espadas\", \"value\": 2, \"priority\": 2, \"realValue\": 2},\r\n    \"E03\": {\"literal\": \"Tres de Espadas\", \"value\": 3, \"priority\": 2, \"realValue\": 3},\r\n    \"E04\": {\"literal\": \"Cuatro de Espadas\", \"value\": 4, \"priority\": 2, \"realValue\": 4},\r\n    \"E05\": {\"literal\": \"Cinco de Espadas\", \"value\": 5, \"priority\": 2, \"realValue\": 5},\r\n    \"E06\": {\"literal\": \"Seis de Espadas\", \"value\": 6, \"priority\": 2, \"realValue\": 6},\r\n    \"E07\": {\"literal\": \"Siete de Espadas\", \"value\": 7, \"priority\": 2, \"realValue\": 7},\r\n    \"E08\": {\"literal\": \"Ocho de Espadas\", \"value\": 8, \"priority\": 2, \"realValue\": 0.5},\r\n    \"E09\": {\"literal\": \"Nueve de Espadas\", \"value\": 9, \"priority\": 2, \"realValue\": 0.5},\r\n    \"E10\": {\"literal\": \"Sota de Espadas\", \"value\": 10, \"priority\": 2, \"realValue\": 0.5},\r\n    \"E11\": {\"literal\": \"Caballo de Espadas\", \"value\": 11, \"priority\": 2, \"realValue\": 0.5},\r\n    \"E12\": {\"literal\": \"Rey de Espadas\", \"value\": 12, \"priority\": 2, \"realValue\": 0.5},\r\n\r\n    \"B01\": {\"literal\": \"As de Bastos\", \"value\": 1, \"priority\": 1, \"realValue\": 1},\r\n    \"B02\": {\"literal\": \"Dos de Bastos\", \"value\": 2, \"priority\": 1, \"realValue\": 2},\r\n    \"B03\": {\"literal\": \"Tres de Bastos\", \"value\": 3, \"priority\": 1, \"realValue\": 3},\r\n    \"B04\": {\"literal\": \"Cuatro de Bastos\", \"value\": 4, \"priority\": 1, \"realValue\": 4},\r\n    \"B05\": {\"literal\": \"Cinco de Bastos\", \"value\": 5, \"priority\": 1, \"realValue\": 5},\r\n    \"B06\": {\"literal\": \"Seis de Bastos\", \"value\": 6, \"priority\": 1, \"realValue\": 6},\r\n    \"B07\": {\"literal\": \"Siete de Bastos\", \"value\": 7, \"priority\": 1, \"realValue\": 7},\r\n    \"B08\": {\"literal\": \"Ocho de Bastos\", \"value\": 8, \"priority\": 1, \"realValue\": 0.5},\r\n    \"B09\": {\"literal\": \"Nueve de Bastos\", \"value\": 9, \"priority\": 1, \"realValue\": 0.5},\r\n    \"B10\": {\"literal\": \"Sota de Bastos\", \"value\": 10, \"priority\": 1, \"realValue\": 0.5},\r\n    \"B11\": {\"literal\": \"Caballo de Bastos\", \"value\": 11, \"priority\": 1, \"realValue\": 0.5},\r\n    \"B12\": {\"literal\": \"Rey de Bastos\", \"value\": 12, \"priority\": 1, \"realValue\": 0.5},\r\n}\r\n\r\nplayers = {\"11115555A\":\r\n               {\"name\": \"Mario\", \"human\": True, \"bank\": False, \"initialCard\": \"\", \"priority\": 0, \"type\": 40,\r\n                \"bet\": 4, \"points\": 0, \"cards\": [], \"roundPoints\": 0},\r\n           \"22225555A\":\r\n               {\"name\": \"Pedro\", \"human\": True, \"bank\": False, \"initialCard\": \"\", \"priority\": 0, \"type\": 40,\r\n                \"bet\": 4, \"points\": 0, \"cards\": [], \"roundPoints\": 0},\r\n           \"34343434H\":\r\n               {\"name\": \"Bot1\", \"human\": False, \"bank\": False, \"initialCard\": \"\", \"priority\": 0, \"type\": 30,\r\n                \"bet\": 4, \"points\": 0, \"cards\": [], \"roundPoints\": 0},\r\n           \"11111111A\":\r\n               {\"name\": \"Bot2\", \"human\": False, \"bank\": False, \"initialCard\": \"\", \"priority\": 0, \"type\": 50,\r\n                \"bet\": 4, \"points\": 0, \"cards\": [], \"roundPoints\": 0}\r\n           }\r\n\r\ncardgame = {'cardgame_id': '', 'players': '', 'start_hour': '', 'rounds': '', 'end_hour': '', \"deck\": \"\"}\r\n\r\nplayer_game = {'cardgame_id': {'id_player_1': {'initial_card_id': 'card_id', 'starting_points': '', 'ending_points': ''}}}\r\n\r\nplayer_game_round = {'cardgame_id': {'round': {\r\n    'id_player_1': {'is_bank': '', 'bet_points': '', 'starting_round_points': '', 'cards_value': '',\r\n                    'ending_round_points': ''}}}}\r\n\r\ngame = []\r\ncardgame_ids = []\r\nletrasDni = [\"T\", \"R\", \"W\", \"A\", \"G\", \"M\", \"Y\", \"F\", \"P\", \"D\", \"X\", \"B\", \"N\",\r\n             \"J\", \"Z\", \"S\", \"Q\", \"V\", \"H\", \"L\", \"C\", \"K\", \"E\"]\r\n\r\ncontextGame = {\"maxRounds\": 5, 'deck': ''}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/resources/bbdd_provisionales.py b/resources/bbdd_provisionales.py
--- a/resources/bbdd_provisionales.py	(revision 4eb2dcc83bdc04f4485e34c5b30ff631ad42c03a)
+++ b/resources/bbdd_provisionales.py	(date 1674392932000)
@@ -54,19 +54,7 @@
     "B12": {"literal": "Rey de Bastos", "value": 12, "priority": 1, "realValue": 0.5},
 }
 
-players = {"11115555A":
-               {"name": "Mario", "human": True, "bank": False, "initialCard": "", "priority": 0, "type": 40,
-                "bet": 4, "points": 0, "cards": [], "roundPoints": 0},
-           "22225555A":
-               {"name": "Pedro", "human": True, "bank": False, "initialCard": "", "priority": 0, "type": 40,
-                "bet": 4, "points": 0, "cards": [], "roundPoints": 0},
-           "34343434H":
-               {"name": "Bot1", "human": False, "bank": False, "initialCard": "", "priority": 0, "type": 30,
-                "bet": 4, "points": 0, "cards": [], "roundPoints": 0},
-           "11111111A":
-               {"name": "Bot2", "human": False, "bank": False, "initialCard": "", "priority": 0, "type": 50,
-                "bet": 4, "points": 0, "cards": [], "roundPoints": 0}
-           }
+players = {}
 
 cardgame = {'cardgame_id': '', 'players': '', 'start_hour': '', 'rounds': '', 'end_hour': '', "deck": ""}
 
